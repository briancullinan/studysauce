<?php

global $isInitted;
$isInitted = false;

/**
 * Implements hook_enable()
 */
function studysauce_enable() {
    db_update('system')
        ->fields(array('weight' => 100))
        ->condition('type', 'module')
        ->condition('name', 'studysauce')
        ->execute();
}

function studysauce_menu_alter(&$items) {
    $items['cart/add/%'] = array(
        'title' => 'Add to cart',
        'page callback' => 'studysauce_cart_auto_empty',
        'page arguments' => array('uc_cart_links_form', 2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => drupal_get_path('module', 'uc_cart_links') . '/uc_cart_links.pages.inc',
    );

    $items['checkin'] = $items['checkin/%'] = array(
        'page callback' => 'studysauce_checkin',
        'page arguments' => array(1),
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'delivery callback' => 'ajax_deliver',
    );

    $items['node/save/schedule'] = array(
        'page callback' => 'studysauce_save_calendar',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/move/schedule'] = array(
        'page callback' => 'studysauce_move_calendar',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/save/profile'] = array(
        'page callback' => 'studysauce_save_profile',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/save/key_dates'] = array(
        'page callback' => 'studysauce_save_dates',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/save/goals'] = array(
        'page callback' => 'studysauce_save_goals',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['user/save'] = array(
        'page callback' => 'studysauce_save_user',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['partner/save'] = array(
        'page callback' => 'studysauce_save_partner',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['adviser'] = array(
        'page callback' => 'studysauce_adviser',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['partner'] = array(
        'page callback' => 'studysauce_partner',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['order/completed'] = array(
        'page callback' => 'studysauce_order_completed',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/plup/goals'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_upload_page',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/plup/partner'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_upload_page',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/plup/plan'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_upload_page',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['user/plup'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_upload_page',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/save/strategies'] = array(
        'page callback' => 'studysauce_save_strategies',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['node/save/completed'] = array(
        'page callback' => 'studysauce_save_completed',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['invite/send'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_invite_send',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['billing/send'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_invite_billing_send',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['student/send'] = array(
        'title' => 'Plupload upload page',
        'page callback' => 'studysauce_invite_parent_student_send',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['group/save'] = array(
        'title' => 'Save imported users to group',
        'page callback' => 'studysauce_group_save',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['contact/save'] = array(
        'title' => 'Save contact us entries',
        'page callback' => 'studysauce_contact_submit',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['quiz/save'] = array(
        'title' => 'Save quiz results',
        'page callback' => 'studysauce_quiz_submit',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['adviserprepaid'] = array(
        'title' => 'Create new account',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_register_form'),
        'access callback' => 'studysauce_user_register_access',
        'type' => MENU_LOCAL_TASK,
    );

    $items['userprepaid'] = array(
        'title' => 'Create new account',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_login'),
        'access callback' => 'user_is_anonymous',
        'type' => MENU_LOCAL_TASK,
    );

    $items['user/save/status'] = array(
        'title' => 'Save user status set by an adviser',
        'page callback' => 'studysauce_save_status',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    $items['user/register']['access callback'] = 'studysauce_user_register_access';
    $items['user/logout']['access callback'] = 'studysauce_user_logout_access';

    return $items;
}

function studysauce_quiz_submit()
{
    global $user;

    $query = db_insert('studysauce_quiz')->fields(array('uid', 'place', 'underlining', 'same_subject', 'laying_down', 'longer_sessions', 'time_completed'));
    $query->values(array(
        'uid' => $user->uid,
        'place' => $_POST['place'] == 'True' ? 1 : 0,
        'underlining' => $_POST['underlining'] == 'True' ? 1 : 0,
        'same_subject' => $_POST['same_subject'] == 'True' ? 1 : 0,
        'laying_down' => $_POST['laying_down'] == 'True' ? 1 : 0,
        'longer_sessions' => $_POST['longer_sessions'] == 'True' ? 1 : 0,
        'time_completed' => date('Y/m/d H:i:s')
    ));
    $sid = $query->execute();

    print json_encode(array(
        'results' => theme('studysauce-quiz-results', array('sid' => $sid))
    ));
    drupal_exit();
}

function studysauce_contact_submit()
{
    global $user;

    studysauce_admin_email($_POST);

    $query = db_insert('studysauce_contact')->fields(array('uid', 'name', 'email', 'message', 'time_sent'));
    $query->values(array(
        'uid' => $user->uid,
        'name' => $_POST['name'],
        'email' => $_POST['email'],
        'message' => $_POST['message'],
        'time_sent' => date('Y/m/d H:i:s')
    ));
    $query->execute();

    print json_encode(array());
    drupal_exit();
}

function studysauce_user_register_access()
{
    global $isInitted;
    if(!$isInitted)
        studysauce_init();
    return user_register_access();
}

function studysauce_user_logout_access()
{
    if(!user_is_logged_in())
        $GLOBALS['studysauce-goto'] = '';
    return user_is_logged_in();
}

function studysauce_partner()
{
    global $user;
    // check if user is partnered up
    $partnerQuery = new EntityFieldQuery();
    $partners = $partnerQuery->entityCondition('entity_type', 'field_collection_item')
        ->propertyCondition('field_name', 'field_partners')
        ->fieldCondition('field_email', 'value', $user->mail)
        ->execute();
    if(isset($partners['field_collection_item']) && !empty($partners['field_collection_item']))
    {
        $partners = array_keys($partners['field_collection_item']);
        foreach($partners as $p)
        {
            $partner = entity_load('field_collection_item', array($p));
            $host = $partner[$p]->hostEntity();
            $perm = array_map(function ($x) {return $x['value']; }, $partner[$p]->field_permissions['und']);
            if($host->uid == $_GET['uid'])
            {
                print json_encode(array(
                    'content' => theme('studysauce-partner-info', array(
                        'account' => user_load(intval($_GET['uid'])),
                        'permissions' => $perm)),
                    'styles' => drupal_get_css(),
                    'scripts' => drupal_get_js()
                ));
            }
        }
    }
}

function studysauce_adviser()
{
    // TODO: check if user is in advisers group

    print json_encode(array(
        'content' => theme('studysauce-adviser', array('account' => user_load(intval($_GET['uid'])))),
        'styles' => drupal_get_css(),
        'scripts' => drupal_get_js()
    ));
}

/**
 * Plupload's upload function.
 */
function studysauce_upload_page() {

    drupal_add_http_header('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT', TRUE);
    drupal_add_http_header('Last-Modified', gmdate("D, d M Y H:i:s") . ' GMT', TRUE);
    drupal_add_http_header('Cache-Control', 'no-store, no-cache, must-revalidate post-check=0, pre-check=0', TRUE);
    drupal_add_http_header('Pragma', 'no-cache', TRUE);

    // Settings
    $targetDir = $GLOBALS['conf']['file_temporary_path'] .'/';
    // 5 minutes execution time
    @set_time_limit(5 * 60);
    // Uncomment this one to fake upload time
    // usleep(5000);

    // Get parameters
    $chunk = isset($_REQUEST['chunk']) ? $_REQUEST['chunk'] : 0;
    $chunks = isset($_REQUEST['chunks']) ? $_REQUEST['chunks'] : 0;
    $filename = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';

    // Clean the fileName for security reasons
    $extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp *';
    $filename = file_munge_filename($filename, $extensions, FALSE);

    // Make sure the fileName is unique but only if chunking is disabled
    if ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $filename)) {
        $ext = strrpos($filename, '.');
        $filename_a = substr($filename, 0, $ext);
        $filename_b = substr($filename, $ext);

        $count = 1;
        while (file_exists($targetDir . DIRECTORY_SEPARATOR . $filename_a . '_' . $count . $filename_b))
            $count++;

        $filename = $filename_a . '_' . $count . $filename_b;
    }


    // Look for the content type header
    if (isset($_SERVER['HTTP_CONTENT_TYPE'])) {
        $contentType = $_SERVER['HTTP_CONTENT_TYPE'];
    }

    if (isset($_SERVER['CONTENT_TYPE'])) {
        $contentType = $_SERVER['CONTENT_TYPE'];
    }

    // Handle non multipart uploads older WebKit versions didn't support multipart in HTML5
    if (strpos($contentType, 'multipart') !== false) {
        if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {
            // Open temp file
            $out = fopen($targetDir . DIRECTORY_SEPARATOR . $filename, $chunk == 0 ? 'wb' : 'ab');
            if ($out) {
                // Read binary input stream and append it to temp file
                $in = fopen($_FILES['file']['tmp_name'], 'rb');

                if ($in) {
                    while ($buff = fread($in, 4096))
                        fwrite($out, $buff);
                } else {
                    die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
                }

                fclose($in);
                fclose($out);
                @unlink($_FILES['file']['tmp_name']);
            } else {
                die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
            }
        } else {
            die('{"jsonrpc" : "2.0", "error" : {"code": 103, "message": "Failed to move uploaded file."}, "id" : "id"}');
        }
    } else {
        // Open temp file
        $out = fopen($targetDir . DIRECTORY_SEPARATOR . $filename, $chunk == 0 ? 'wb' : 'ab');
        if ($out) {
            // Read binary input stream and append it to temp file
            $in = fopen("php://input", 'rb');

            if ($in) {
                while ($buff = fread($in, 4096)) {
                    fwrite($out, $buff);
                }
            } else {
                die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
            }

            fclose($in);
            fclose($out);
        } else {
            die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
        }
    }

    if ((isset($_GET['chunk']) && ($_GET['chunk'] + 1) == $_GET['chunks']) || (!isset($_GET['chunk']))) {
        $source = 'temporary://'. $filename;
        $file = new stdClass();
        $file->uid      = $GLOBALS['user']->uid;
        $file->status   = 0;
        $file->filename = $filename;
        $file->uri      = $source;
        $file->filemime = file_get_mimetype($file->filename);
        $file->filesize = filesize($source);
        // Save url argument(instance_id) so we can validate file by instance settings
        $file->arg = arg(1);

        $e = FALSE;
        // Here we validate file
        studysauce_plupload_file_validation($file, $e);

        if ($e === FALSE) {
            $return = file_save($file);
            // Generate a secure version of file uri for temporary delivery.
            $file->secure_uri = image_style_url('achievement', $file->uri);
            // We build it as a temp but will deliver it as a public.
            $file->secure_uri = str_replace('system/temporary', variable_get('file_public_path', 'sites/default/files'), $file->secure_uri);

            if(current_path() == 'node/plup/plan')
            {
                module_load_include('utility.inc', 'video');
                module_load_include('field.inc', 'video');
                $transcoder = new Transcoder();
                $thumbnails = $transcoder->extractFrames((array)$file, array());
                $thumbnails[0]->secure_uri = image_style_url('achievement', $thumbnails[0]->uri);
                // We build it as a temp but will deliver it as a public.
                $thumbnails[0]->secure_uri = str_replace('system/temporary', variable_get('file_public_path', 'sites/default/files'), $thumbnails[0]->secure_uri);
                $thumbnails[0]->uri = check_plain(file_create_url($file->uri));
                $thumbnails[0]->thumbnail = $thumbnails[0]->fid;
                $thumbnails[0]->fid = $file->fid;

                $return = $thumbnails[0];
            }
        }
        else {
            file_unmanaged_delete($file->uri);
            $return = (object) array('error_message' => $e);
        }

        drupal_json_output($return);
    }
}

/**
 * Default validation function.
 * In most cases Pluplaod will be used for images so we use image-specific validation.
 * Non-image files has no support right now.
 */
function studysauce_plupload_file_validation(&$file, &$e) {
    if (!isset($file->arg) || (isset($file->arg) && is_numeric($file->arg))) {
        // Check if file is image
        $passImage = file_validate_is_image($file);
        if (!empty($passImage)) {
            $e = reset($passImage);
            return;
        }

        // Check if file has allowed extension
        $passExt = file_validate_extensions($file, 'png gif jpg jpeg');
        if (!empty($passExt)) {
            $e = reset($passExt);
            return;
        }

        // Check if file doesn't exceed the maximal allowed size
        $passSize = file_validate_size($file, parse_size(''), 0);
        if (!empty($passSize)) {
            $e = reset($passSize);
            return;
        }

        // Check if file name isn't too long
        $passLength = file_validate_name_length($file);
        if (!empty($passLength)) {
            $e = reset($passLength);
            return;
        }

        // Check if file meet the resolution restrictions
        $passRes = file_validate_image_resolution($file, '', '');
        if (!empty($passRes)) {
            $e = reset($passRes);
            return;
        }
    }
}

function studysauce_order_completed()
{
    global $user;
    $account = user_load($user->uid);

    // check if we are an accountability partner or a parent
    if(!in_array('adviser', $account->roles) && !in_array('master adviser', $account->roles) &&
        !in_array('partner', $account->roles) && !in_array('parent', $account->roles))
    {
        drupal_goto('profile');
    }
    // for parents and advisers who just paid
    elseif(in_array('adviser', $account->roles) || in_array('master adviser', $account->roles) ||
        in_array('partner', $account->roles))
    {
        drupal_goto('<front>', array('fragment' => 'welcome'));
    }
    // for parents who are not partners
    else
    {
        // log them out
        session_destroy();
        $user = user_load(0);
        drupal_goto('welcome');
    }
}

function studysauce_get_connections($include_invites = false, $include_parents = false)
{
    $connections = array();
    // get a list of users you invited to connect
    global $user;
    $user = user_load($user->uid);
    $partnerQuery = new EntityFieldQuery();
    $partners = $partnerQuery->entityCondition('entity_type', 'field_collection_item')
        ->propertyCondition('field_name', 'field_partners')
        ->fieldCondition('field_email', 'value', $user->mail)
        ->execute();
    if(isset($partners['field_collection_item']) && !empty($partners['field_collection_item']))
    {
        $partners = entity_load('field_collection_item', array_keys($partners['field_collection_item']));
        foreach($partners as $p)
        {
            $host = $p->hostEntity();
            if($host)
                $connections[] = $host;
        }
    }

    if(!empty($user->field_partners) && !empty($user->field_partners[LANGUAGE_NONE]))
    {
        $partners = entity_load('field_collection_item', array_map(function ($x) {return $x['value'];}, $user->field_partners[LANGUAGE_NONE]));
        foreach($partners as $entity)
        {
            if(isset($entity->field_activated[LANGUAGE_NONE][0]['value']) &&
                isset($entity->field_email[LANGUAGE_NONE][0]['value']) &&
                !empty($entity->field_email[LANGUAGE_NONE][0]['value']) &&
                $entity->field_email[LANGUAGE_NONE][0]['value'] != $user->mail)
            {
                $userQuery = new EntityFieldQuery();
                $users = $userQuery->entityCondition('entity_type', 'user')
                    ->propertyCondition('mail', $entity->field_email[LANGUAGE_NONE][0]['value'])
                    ->execute();
                if(!empty($users) && $entity->field_activated[LANGUAGE_NONE][0]['value'])
                {
                    $users = array_keys($users['user']);
                    $uid = array_shift($users);
                    $connections[] = user_load($uid);
                }
                elseif($include_invites)
                {
                    $entity->mail = $entity->field_email[LANGUAGE_NONE][0]['value'];
                    $entity->is_invite = true;
                    $connections[] = $entity;
                }
            }
        }
    }

    if(!$include_parents)
        return $connections;

    if(!empty($user->field_invites) && !empty($user->field_invites[LANGUAGE_NONE]))
    {
        $partners = entity_load('field_collection_item', array_map(function ($x) {return $x['value'];}, $user->field_invites[LANGUAGE_NONE]));
        foreach($partners as $i => $entity)
        {
            if(isset($entity->field_activated[LANGUAGE_NONE][0]['value']) &&
                isset($entity->field_email[LANGUAGE_NONE][0]['value']) &&
                !empty($entity->field_email[LANGUAGE_NONE][0]['value']) &&
                $entity->field_email[LANGUAGE_NONE][0]['value'] != $user->mail)
            {
                $userQuery = new EntityFieldQuery();
                $users = $userQuery->entityCondition('entity_type', 'user')
                    ->propertyCondition('mail', $entity->field_email[LANGUAGE_NONE][0]['value'])
                    ->execute();
                if(!empty($users) && $entity->field_activated[LANGUAGE_NONE][0]['value'])
                {
                    $users = array_keys($users['user']);
                    $uid = array_shift($users);
                    $connections[] = user_load($uid);
                }
                elseif($include_invites)
                {
                    $entity->mail = $entity->field_email[LANGUAGE_NONE][0]['value'];
                    $entity->is_invite = true;
                    $connections[] = $entity;
                }
            }
        }
    }

    // get a list of users that invited to connect with you
    $inviteQuery = new EntityFieldQuery();
    $invites = $inviteQuery->entityCondition('entity_type', 'field_collection_item')
        ->propertyCondition('field_name', 'field_invites')
        ->fieldCondition('field_email', 'value', $user->mail)
        ->fieldCondition('field_activated', 'value', 1)
        ->execute();

    if(isset($invites['field_collection_item']) && !empty($invites['field_collection_item']))
    {
        $invites = entity_load('field_collection_item', array_keys($invites['field_collection_item']));
        foreach($invites as $p)
        {
            $host = $p->hostEntity();
            if($host)
                $connections[] = $host;
        }
    }

    return $connections;
}

function studysauce_get_incentive($account = null)
{
    if($account == null)
    {
        global $user;
        $account = user_load($user->uid);
    }
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'incentive')
        ->propertyCondition('title', $account->mail)
        ->propertyCondition('status', 1)
        ->range(0,1)
        ->execute();
    if (!empty($entities['node']))
    {
        $nodes = array_keys($entities['node']);
        $nid = array_shift($nodes);
        $node = node_load($nid);
        return $node;
    }
}

function studysauce_is_incentives_setup($account = null)
{
    if($account == null)
    {
        global $user;
        $account = user_load($user->uid);
    }
    // only load the two step process if an incentive node has not been created
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'incentive')
        ->propertyCondition('title', $account->mail)
        ->propertyCondition('status', 1)
        ->range(0,1)
        ->execute();
    if(empty($entities['node']))
        return 1;

    $nodes = array_keys($entities['node']);
    $nid = array_shift($nodes);
    $incentive = node_load($nid);

    $any = false;
    if(isset($account->field_invites[LANGUAGE_NONE][0]))
    {
        $invites = entity_load('field_collection_item', array_map(function ($x) {return $x['value'];}, $account->field_invites[LANGUAGE_NONE]));
        foreach($invites as $i => $invite)
        {
            if(isset($invite->field_email[LANGUAGE_NONE][0]['value']) &&
                !empty($invite->field_email[LANGUAGE_NONE][0]['value']))
                $any = true;
        }
    }

    return 3;
}

function _studysauce_get_incentives_hours($account = null)
{
    if($account == null)
    {
        global $user;
        $account = user_load($user->uid);
    }
    $incentive = studysauce_get_incentive($account);
    if(!isset($incentive))
        return 0;

    foreach($incentive->field_goals[LANGUAGE_NONE] as $i => $goal)
    {
        $entity = entity_load('field_collection_item', array($goal['value']));
        if($entity[$goal['value']]->field_type[LANGUAGE_NONE][0]['value'] == 'milestone')
            $milestone = $entity[$goal['value']];
        if($entity[$goal['value']]->field_type[LANGUAGE_NONE][0]['value'] == 'outcome')
            $outcome = $entity[$goal['value']];
        if($entity[$goal['value']]->field_type[LANGUAGE_NONE][0]['value'] == 'behavior')
            $behavior = $entity[$goal['value']];
    }

    if(isset($behavior->field_hours[LANGUAGE_NONE][0]['value']))
        return intval($behavior->field_hours[LANGUAGE_NONE][0]['value']);
    return 0;
}

function studysauce_get_study_weeks()
{
    return 0;
    // TODO: finish this
    $result = array(0,0,0);
    global $user;

    $incentive = studysauce_get_incentive();
    if(!isset($incentive))
        return $result;

    foreach($incentive->field_goals[LANGUAGE_NONE] as $i => $goal)
    {
        $entity = entity_load('field_collection_item', array($goal['value']));
        if($entity[$goal['value']]->field_type[LANGUAGE_NONE][0]['value'] == 'milestone')
            $milestone = $entity[$goal['value']];
        if($entity[$goal['value']]->field_type[LANGUAGE_NONE][0]['value'] == 'outcome')
            $outcome = $entity[$goal['value']];
        if($entity[$goal['value']]->field_type[LANGUAGE_NONE][0]['value'] == 'behavior')
            $behavior = $entity[$goal['value']];
    }

    if(!empty($behavior->field_hours))
    {
        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
            ->propertyCondition('type', 'schedule')
            ->propertyCondition('title', $user->mail)
            ->propertyCondition('status', 1)
            ->range(0,1)
            ->execute();

        if (!empty($entities['node']))
        {
            $nodes = array_keys($entities['node']);
            $nid = array_shift($nodes);
            $node = node_load($nid);
            if(!empty($node->field_classes))
            {
                $weeks = array();
                foreach($node->field_classes[LANGUAGE_NONE] as $i => $class)
                {
                    $entity = entity_load('field_collection_item', array($class['value']));
                    foreach($entity[$class['value']]->field_checkin[LANGUAGE_NONE] as $j => $checkin)
                    {
                        $time = strtotime($checkin['value']);
                        if(date('Y', $time) == date('Y', time()))
                        {
                            $w = date('W', $time);
                            $weeks[$w] = (isset($weeks[$w])
                                    ? $weeks[$w]
                                    : 0) + 1
                                /*(empty($checkin['value2'])
                                    ? 1
                                    : ((strtotime($checkin['value2']) - $time) / 3600))*/;
                        }
                    }
                }

                $count = 0;
                foreach($weeks as $w => $hours)
                {
                    if($hours >= $behavior->field_hours[LANGUAGE_NONE][0]['value'])
                        $count++;
                }
                $result[0] = $count;
            }
        }
    }

    return $result;
}

function studysauce_get_milestones()
{
    return 0;
}

function studysauce_get_last_achievement()
{
    return 0;
}

function studysauce_init()
{
    global $isInitted;
    $isInitted = true;
    module_load_include('inc', 'studysauce', 'studysauce.forms');
    module_load_include('inc', 'studysauce', 'plans');
    module_load_include('inc', 'studysauce', 'dates');
    module_load_include('inc', 'studysauce', 'checkin');
    module_load_include('inc', 'studysauce', 'user');
    module_load_include('inc', 'studysauce', 'partner');
    module_load_include('inc', 'studysauce', 'goals');
    module_load_include('inc', 'studysauce', 'metrics');
    module_load_include('inc', 'studysauce', 'badges');
    module_load_include('inc', 'studysauce', 'invite');
    module_load_include('inc', 'studysauce', 'profile');
    module_load_include('inc', 'studysauce', 'emails');

    global $user;

    if(isset($_GET['achievement']))
    {
        if(isset($_SESSION['studysauce']['achievement']))
            $code = $_SESSION['studysauce']['achievement'];
        // get overrides session
        if(isset($_GET['achievement']))
            $code = $_GET['achievement'];
        if(isset($code))
        {
            $inviteQuery = new EntityFieldQuery();
            $achievements = $inviteQuery->entityCondition('entity_type', 'field_collection_item')
                ->propertyCondition('field_name', 'field_achievements')
                ->fieldCondition('field_code', 'value', $code)
                ->execute();
            if(isset($achievements['field_collection_item']))
            {
                $achievements = array_keys($achievements['field_collection_item']);
                $eid = array_shift($achievements);
                $achievement = entity_load('field_collection_item', array($eid));
                if(!empty($achievement))
                {
                    $achievement = $achievement[$eid];
                    $_SESSION['studysauce']['achievement'] = $code;
                    $achievement->field_activated['und'][0]['value'] = 1;
                    $achievement->save();
                }
            }
        }
    }
    if(isset($_GET['invite_code']))
    {
        $entity = studysauce_get_invite_entity();
    }
    if(isset($_GET['partner_code']))
    {
        $entity = studysauce_get_partner_entity();
    }
    if(arg(1) == 'ajax')
    {
        module_load_include('inc', 'user', 'user.pages');
        module_load_include('inc', 'node', 'node.pages');
    }

    if(drupal_get_path_alias(current_path()) == 'home')
    {
        studysauce_user_login();
        if(isset($GLOBALS['studysauce-goto']) && $GLOBALS['studysauce-goto'] != '<front>')
            drupal_goto('<front>'); // should get overriden by path we just set up
    }

}

function studysauce_mail_alter(&$message){
    global $user;
    $account = user_load($user->uid);
    watchdog('mail', $message['id'] . $message['to']);
    if($message['id'] == 'user_password_reset')
    {
        $message = implode('<br />', explode("\n", $message['body'][0]));
        $message = preg_replace('/(https:\/\/.*)/i', '<a href="$1">$1</a>', $message);
        $body = theme('studysauce-email', array(
            'message' => $message,
            'greeting' => 'Dear ' . (isset($account->field_first_name[LANGUAGE_NONE][0]['value']) && isset($account->field_last_name[LANGUAGE_NONE][0]['value'])
                    ? $account->field_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $account->field_last_name[LANGUAGE_NONE][0]['value']
                    : 'student') . ',',
            'link' => false
            ));

        $new_message = drupal_mail('studysauce', 'password-reset', $message['to'], language_default(), array(), $message['from'], FALSE);

        $new_message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
        $new_message['headers']['X-SMTPAPI'] = preg_replace('/(.{1,72})(\s)/i', "\1\n   ", json_encode(array('category' => array('reset-password'))));
        $new_message['subject'] = $message['subject'];
        $new_message['body'] = str_replace('admin@studysauce.com', '<a href="mailto:admin@studysauce.com" style="color:#FF9900;">admin@studysauce.com</a>', $body);

        $system = drupal_mail_system('studysauce', 'password-reset');

        $new_message['result'] = $system->mail($new_message);

        $message['send'] = FALSE;
        $message['to'] = 'junk@studysauce.com';
    }
    if ($message['id'] == 'user_register_pending_approval' ||
        $message['id'] == 'user_register_no_approval_required')
    {
        //do what ever you want
        $message['send'] = FALSE;
        $message['to'] = 'junk@studysauce.com';
    }

}

function studysauce_get_partner_entity()
{
    global $user;
    if(isset($_SESSION['studysauce']['partner_code']))
        $code = $_SESSION['studysauce']['partner_code'];
    // get overrides session
    if(isset($_GET['partner_code']))
        $code = $_GET['partner_code'];
    if(isset($code))
    {
        $inviteQuery = new EntityFieldQuery();
        $invites = $inviteQuery->entityCondition('entity_type', 'field_collection_item')
            ->propertyCondition('field_name', 'field_partners')
            ->fieldCondition('field_code', 'value', $code)
            ->execute();
        if(isset($invites['field_collection_item']))
        {
            $invites = array_keys($invites['field_collection_item']);
            $eid = array_shift($invites);
            $invite = entity_load('field_collection_item', array($eid));
            if(!empty($invite))
            {
                $invite = $invite[$eid];
                // valid invite, destroy session
                if($user->uid > 0 && $invite->field_email['und'][0]['value'] != $user->mail)
                {
                    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
                    module_invoke_all('user_logout', $user);
                    session_destroy();
                    $user = user_load(0);
                }

                $_SESSION['studysauce']['partner_code'] = $code;
                $invite->field_activated['und'][0]['value'] = 1;
                $invite->save(true);

                return $invite;
            }
        }
    }
}

function studysauce_get_invite_entity()
{
    global $user;
    if(isset($_SESSION['studysauce']['invite_code']))
        $code = $_SESSION['studysauce']['invite_code'];
    // get overrides session
    if(isset($_GET['invite_code']))
        $code = $_GET['invite_code'];
    if(isset($code))
    {
        $inviteQuery = new EntityFieldQuery();
        $invites = $inviteQuery->entityCondition('entity_type', 'field_collection_item')
            ->propertyCondition('field_name', 'field_invites')
            ->fieldCondition('field_code', 'value', $code)
            ->execute();
        if(isset($invites['field_collection_item']))
        {
            $invites = array_keys($invites['field_collection_item']);
            $eid = array_shift($invites);
            $invite = entity_load('field_collection_item', array($eid));
            if(!empty($invite))
            {
                $invite = $invite[$eid];
                // valid invite, destroy session
                if($user->uid > 0 && $invite->field_email['und'][0]['value'] != $user->mail)
                {
                    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
                    module_invoke_all('user_logout', $user);
                    session_destroy();
                    $user = user_load(0);
                }

                $_SESSION['studysauce']['invite_code'] = $code;
                $invite->field_activated['und'][0]['value'] = 1;
                $invite->save(true);

                return $invite;
            }
        }
    }
}

function studysauce_get_inviting_user($invite = null)
{
    $invite = isset($invite) ? $invite : studysauce_get_invite_entity();
    if(isset($invite))
    {
        $userQuery = new EntityFieldQuery();
        $users = $userQuery->entityCondition('entity_type', 'user')
            ->fieldCondition('field_invites', 'value', $invite->item_id)
            ->execute();
        $users = array_keys($users['user']);
        $uid = array_shift($users);
        $otherUser = user_load($uid);
        return $otherUser;
    }
}

function studysauce_copy_password_info($form, &$form_state)
{
    $form_state['values']['panes']['customer']['new_account']['pass'] =
        $form_state['values']['panes']['customer']['new_account']['pass_confirm'] =
            $form_state['values']['panes']['customer']['pass'];
}

function studysauce_user_presave(&$edit, $account, $category) {
    $roles = user_roles();
    if(isset($account->roles) && is_array($account->roles))
        $account->roles = array_intersect_key($roles, array_filter($account->roles, function ($x) {return $x == true;}));
    if(isset($edit['roles']) && is_array($edit['roles']))
        $edit['roles'] = array_intersect_key($roles, array_filter($edit['roles'], function ($x) {return $x == true;}));

    if (($account->is_new || (isset($account->original) && empty($account->original->field_first_name))) &&
        (isset($edit['field_first_name']['und'][0]['value']) || isset($account->field_first_name['und'][0]['value']))) {
        studysauce_save_user((object)((array)$account + $edit), $edit);
    }
}

function _studysauce_get_short_class_name($className)
{
    $classNameParts = explode(' ', $className);
    if(count($classNameParts) == 1 && strlen($classNameParts[0]) <= 6)
        $classPart = $classNameParts[0];
    else
        $classPart = substr(strtoupper($classNameParts[0]), 0, 3) . (strpos(strtolower($className), 'lab') !== false ? 'L' : '') . '<br />' . substr(strtoupper(end($classNameParts)), -3, 3);
    return $classPart;
}

function studysauce_cron()
{
    // find partners who haven't set up their account to send invites to
    $query = db_select('field_data_field_invites', 'inv');
    $query->fields('inv', array('entity_id'));
    $query->fields('inv', array('field_invites_value'));
    $query->fields('ac', array('field_activated_value'));
    $query->fields('em', array('field_email_value'));
    $query->fields('re', array('field_3_day_reminder_value'));

    // only send invite reminders to people who haven't clicked the email link
    $query->leftJoin('field_data_field_activated', 'ac', 'ac.entity_id = inv.field_invites_value');
    $aOr = db_or();
    $aOr->condition('ac.field_activated_value', NULL, 'IS');
    $aOr->condition('ac.field_activated_value', 0, '=');
    $query->condition($aOr);

    // make sure there is a valid email address
    $query->join('field_data_field_email', 'em', 'em.entity_id = inv.field_invites_value');
    $query->condition('em.field_email_value', '', '!=');
    $query->condition('em.field_email_value', NULL, 'IS NOT');

    // only send e-mail to invitees from 3 to 4 days ago
    $query->join('field_data_field_sent', 'se', 'se.entity_id = inv.field_invites_value');
    $sOr = db_or();
    $wk1 = db_and();
    $wk1->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*4), '>=');
    $wk1->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*3), '<=');
    $wk2 = db_and();
    $wk2->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*11), '>=');
    $wk2->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*10), '<=');
    $wk3 = db_and();
    $wk3->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*18), '>=');
    $wk3->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*17), '<=');
    $wk4 = db_and();
    $wk4->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*25), '>=');
    $wk4->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*24), '<=');
    $sOr->condition($wk1);
    $sOr->condition($wk2);
    $sOr->condition($wk3);
    $sOr->condition($wk4);
    $query->condition($sOr);

    // only send 3 days reminder e-mails once per week
    $query->leftJoin('field_data_field_3_day_reminder', 're', 're.entity_id = inv.field_invites_value');
    $rOr = db_or();
    $rOr->condition('re.field_3_day_reminder_value', NULL, 'IS');
    $rOr->condition('re.field_3_day_reminder_value', 0, '=');
    $rOr->condition('re.field_3_day_reminder_value', date('Y-m-d H:i:s', time() - 3600*24*7), '<=');
    $query->condition($rOr);

    // get entities and send e-mails
    $entities = $query->execute()->fetchAllAssoc('field_invites_value');
    if (!empty($entities))
    {
        $invites = entity_load('field_collection_item', array_keys($entities));
        foreach($invites as $eid => $inv)
        {
            $newUser = $inv->hostEntity();
            // TODO: only anonymous parents can send invites to students?
            if($newUser == null && ($newUser = user_load(0)))
                studysauce_3_day_invite($newUser, $inv);
            // TODO: if send from a parent they went through the buy funnel?
            elseif(in_array('parent', $newUser->roles) && !in_array('partner', $newUser->roles) &&
                !in_array('adviser', $newUser->roles) && !in_array('master adviser', $newUser->roles))
                studysauce_3_day_prepaid_invite($newUser, $inv);
            // TODO: student only invites parents in bill my parents?
            elseif(in_array('adviser', $newUser->roles) || in_array('master adviser', $newUser->roles))
                studysauce_3_day_b2b_partner_invite($newUser, $inv);
            elseif(!in_array('parent', $newUser->roles))
                studysauce_3_day_billmyparents_invite($newUser, $inv);
        }
    }

    // something very similar to the above for accountability partners
    // find partners who haven't set up their account to send invites to
    $query = db_select('field_data_field_partners', 'inv');
    $query->fields('inv', array('field_partners_value'));
    $query->fields('ac', array('field_activated_value'));
    $query->fields('em', array('field_email_value'));
    $query->fields('re', array('field_3_day_reminder_value'));

    // only send invite reminders to people who haven't clicked the email link
    $query->leftJoin('field_data_field_activated', 'ac', 'ac.entity_id = inv.field_partners_value');
    $aOr = db_or();
    $aOr->condition('ac.field_activated_value', NULL, 'IS');
    $aOr->condition('ac.field_activated_value', 0, '=');
    $query->condition($aOr);

    // make sure there is a valid email address
    $query->join('field_data_field_email', 'em', 'em.entity_id = inv.field_partners_value');
    $query->condition('em.field_email_value', '', '!=');
    $query->condition('em.field_email_value', NULL, 'IS NOT');

    // only send e-mail to invitees from 3 to 4 days ago plus the next 3 weeks
    $query->join('field_data_field_sent', 'se', 'se.entity_id = inv.field_partners_value');
    $sOr = db_or();
    $wk1 = db_and();
    $wk1->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*4), '>=');
    $wk1->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*3), '<=');
    $wk2 = db_and();
    $wk2->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*11), '>=');
    $wk2->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*10), '<=');
    $wk3 = db_and();
    $wk3->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*18), '>=');
    $wk3->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*17), '<=');
    $wk4 = db_and();
    $wk4->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*25), '>=');
    $wk4->condition('se.field_sent_value', date('Y-m-d H:i:s', time() - 3600*24*24), '<=');
    $sOr->condition($wk1);
    $sOr->condition($wk2);
    $sOr->condition($wk3);
    $sOr->condition($wk4);
    $query->condition($sOr);

    // only send 3 days reminder e-mails once per week
    $query->leftJoin('field_data_field_3_day_reminder', 're', 're.entity_id = inv.field_partners_value');
    $rOr = db_or();
    $rOr->condition('re.field_3_day_reminder_value', NULL, 'IS');
    $rOr->condition('re.field_3_day_reminder_value', 0, '=');
    $rOr->condition('re.field_3_day_reminder_value', date('Y-m-d H:i:s', time() - 3600*24*7), '<=');
    $query->condition($rOr);

    // get entities and send e-mails
    $entities = $query->execute()->fetchAllAssoc('field_partners_value');
    if (!empty($entities))
    {
        $invites = entity_load('field_collection_item', array_keys($entities));
        foreach($invites as $eid => $inv)
        {
            $newUser = $inv->hostEntity();
            if(!in_array('parent', $newUser->roles) && !in_array('partner', $newUser->roles) &&
                !in_array('adviser', $newUser->roles) && !in_array('master adviser', $newUser->roles))
                studysauce_3_day_partner_invite($newUser, $inv);
        }
    }

    // check for activated users
    $query = db_select('users', 'u');
    $query->fields('u', array('uid', 'status', 'created'));
    $query->condition('u.created', time() - 3600*24*4, '>=');
    $query->condition('u.created', time() - 3600*24*3, '<=');
    $query->condition('u.status', 1, '=');

    // only sent to users once via the 3_day_marketing tag
    $query->leftJoin('field_data_field_3_day_marketing', 'ma', 'ma.entity_id = u.uid');
    $rOr = db_or();
    $rOr->condition('ma.field_3_day_marketing_value', NULL, 'IS');
    $rOr->condition('ma.field_3_day_marketing_value', 0, '=');
    $query->condition($rOr);

    $users = $query->execute()->fetchAllAssoc('uid');
    if (!empty($users))
    {
        foreach($users as $uid => $u)
        {
            $newUser = user_load($uid);
            // TODO: do this in sql
            if(!in_array('adviser', $newUser->roles) && !in_array('master adviser', $newUser->roles) &&
                !in_array('parent', $newUser->roles) && !in_array('partner', $newUser->roles))
            studysauce_3_day_marketing($newUser);
        }
    }

    // find reminders that need sending
    $query = db_select('field_data_field_reminders', 'rem');
    $query->fields('rem', array('field_reminders_value', 'entity_id'));

    // join for each duration reminder up front
    $query->join('field_data_field_due_date', 'dd', 'dd.entity_id = rem.field_reminders_value');
    // tomorrow
    $query->leftJoin('field_data_field_reminder', 'r', 'r.entity_id = rem.field_reminders_value AND r.field_reminder_value = 86400');
    $query->leftJoin('field_data_field_reminder_sent', 'rs', 'rs.entity_id = rem.field_reminders_value AND rs.field_reminder_sent_value = 86400');

    // two days
    $query->leftJoin('field_data_field_reminder', 'r2', 'r2.entity_id = rem.field_reminders_value AND r2.field_reminder_value = 172800');
    $query->leftJoin('field_data_field_reminder_sent', 'rs2', 'rs2.entity_id = rem.field_reminders_value AND rs2.field_reminder_sent_value = 172800');

    // 4 days
    $query->leftJoin('field_data_field_reminder', 'r3', 'r3.entity_id = rem.field_reminders_value AND r3.field_reminder_value = 345600');
    $query->leftJoin('field_data_field_reminder_sent', 'rs3', 'rs3.entity_id = rem.field_reminders_value AND rs3.field_reminder_sent_value = 345600');

    // 7 days
    $query->leftJoin('field_data_field_reminder', 'r4', 'r4.entity_id = rem.field_reminders_value AND r4.field_reminder_value = 604800');
    $query->leftJoin('field_data_field_reminder_sent', 'rs4', 'rs4.entity_id = rem.field_reminders_value AND rs4.field_reminder_sent_value = 604800');

    // 14 days
    $query->leftJoin('field_data_field_reminder', 'r5', 'r5.entity_id = rem.field_reminders_value AND r5.field_reminder_value = 1209600');
    $query->leftJoin('field_data_field_reminder_sent', 'rs5', 'rs5.entity_id = rem.field_reminders_value AND rs5.field_reminder_sent_value = 1209600');

    // check for reminders for tomorrow that haven't been sent
    $andTom = db_and();
    $andTom->condition('r.field_reminder_value', null, 'IS NOT');
    $andTom->condition('rs.field_reminder_sent_value', null, 'IS');

    // check for deadlines due tomorrow
    $andTom->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time()), '>=');
    $andTom->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time() + 86400), '<=');

    // check for reminders in two days
    $andTwo = db_and();
    $andTwo->condition('r2.field_reminder_value', null, 'IS NOT');
    $andTwo->condition('rs.field_reminder_sent_value', null, 'IS');
    $andTwo->condition('rs2.field_reminder_sent_value', null, 'IS');

    // check for deadlines due in two days
    $andTwo->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time()), '>=');
    $andTwo->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time() + 172800), '<=');

    // check for 4 days reminders
    $andFour = db_and();
    $andFour->condition('r3.field_reminder_value', null, 'IS NOT');
    $andFour->condition('rs.field_reminder_sent_value', null, 'IS');
    $andFour->condition('rs2.field_reminder_sent_value', null, 'IS');
    $andFour->condition('rs3.field_reminder_sent_value', null, 'IS');

    // check for deadlines in 4 days
    $andFour->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time()), '>=');
    $andFour->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time() + 345600), '<=');

    // check for 7 days reminders
    $andSev = db_and();
    $andSev->condition('r4.field_reminder_value', null, 'IS NOT');
    $andSev->condition('rs.field_reminder_sent_value', null, 'IS');
    $andSev->condition('rs2.field_reminder_sent_value', null, 'IS');
    $andSev->condition('rs3.field_reminder_sent_value', null, 'IS');
    $andSev->condition('rs4.field_reminder_sent_value', null, 'IS');

    // check for deadlines in 7 days
    $andSev->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time()), '>=');
    $andSev->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time() + 604800), '<=');

    // check for 14 days reminders
    $and4Tn = db_and();
    $and4Tn->condition('r5.field_reminder_value', null, 'IS NOT');
    $and4Tn->condition('rs.field_reminder_sent_value', null, 'IS');
    $and4Tn->condition('rs2.field_reminder_sent_value', null, 'IS');
    $and4Tn->condition('rs3.field_reminder_sent_value', null, 'IS');
    $and4Tn->condition('rs4.field_reminder_sent_value', null, 'IS');
    $and4Tn->condition('rs5.field_reminder_sent_value', null, 'IS');

    // check for deadlines in 14 days
    $and4Tn->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time()), '>=');
    $and4Tn->condition('dd.field_due_date_value', date('Y-m-d H:i:s', time() + 1209600), '<=');

    // combine all conditions with original query
    $allOr = db_or();
    $allOr->condition($andTom);
    $allOr->condition($andTwo);
    $allOr->condition($andFour);
    $allOr->condition($andSev);
    $allOr->condition($and4Tn);
    $query->condition($allOr);

    $reminders = $query->execute()->fetchAllAssoc('field_reminders_value');
    if (!empty($reminders))
    {
        $nids = array_unique(array_map(function ($x) {return $x->entity_id;}, $reminders));
        // TODO: find nodes and group by title, field_collection_items doesn't work anymore
        $query = db_select('node', 'd');
        $query->fields('d', array('nid', 'title'));
        $query->condition('d.type', 'key_dates');
        $query->condition('d.nid', $nids, 'IN');
        $dates = $query->execute()->fetchAllAssoc('nid');

        // group reminders by user and send 1 aggregate email per user
        $users = array();
        $deadlines = array();
        $rems = entity_load('field_collection_item', array_keys($reminders));
        foreach($rems as $eid => $r)
        {
            if(isset($dates[$reminders[$eid]->entity_id]))
            {
                // TODO: change this association if we stop using titles for relating back to user
                if(!isset($users[$dates[$reminders[$eid]->entity_id]->title]))
                    $users[$dates[$reminders[$eid]->entity_id]->title] = user_load_by_mail($dates[$reminders[$eid]->entity_id]->title);
                $deadlines[$dates[$reminders[$eid]->entity_id]->title][] = $r;
            }
        }

        // send aggregate emails
        foreach($deadlines as $email => $all)
        {
            studysauce_reminders($users[$email], $all);
        }
    }

    // check for users that have been inactive
    $query = db_select('users', 'u');
    $query->fields('u', array('uid', 'status', 'access'));
    $query->condition('u.access', time() - 3600*24*15, '>=');
    $query->condition('u.access', time() - 3600*24*14, '<=');
    $query->condition('u.status', 1, '=');

    // check if the inactive email hasn't been sent in at least two weeks
    $query->leftJoin('field_data_field_inactivity_sent', 'ia', 'ia.entity_id = u.uid');
    $iOr = db_or();
    $iOr->condition('ia.field_inactivity_sent_value', NULL, 'IS');
    $iOr->condition('ia.field_inactivity_sent_value', date('Y-m-d H:i:s', time() - 3600*24*14), '<=');
    $query->condition($iOr);

    $users = $query->execute()->fetchAllAssoc('uid');
    if (!empty($users))
    {
        foreach($users as $uid => $u)
        {
            $newUser = user_load($uid);
            if(!in_array('adviser', $newUser->roles) && !in_array('master adviser', $newUser->roles) &&
                !in_array('parent', $newUser->roles) && !in_array('partner', $newUser->roles))
            {
                $groups = og_get_groups_by_user($newUser);
                if(isset($groups['node']))
                {
                    // get group adviser
                    $query = db_select('og_membership', 'ogm');
                    $query->condition('ogm.gid', array_keys($groups['node']), 'IN');
                    $query->fields('ogm', array('entity_type', 'etid'));
                    $result = $query->execute();
                    $members = $result->fetchAll();
                    foreach($members as $i => $member)
                    {
                        $m = user_load($member->etid);
                        if(in_array('adviser', $m->roles) || in_array('master adviser', $m->roles))
                        {
                            $partner = $m;
                            if(in_array('adviser', $m->roles))
                                break;
                        }
                    }
                    if(isset($partner))
                        studysauce_b2b_inactivity($newUser, $partner);
                }
            }
        }
    }
}

function studysauce_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    $account = user_load($user->uid);

    switch ($form_id) {
        case 'uc_cart_checkout_form':
            drupal_add_js(drupal_get_path('theme', 'successinc') .'/js/buy.js');

            $form['actions']['continue']['#value'] = 'Complete order';
            $form['#submit'][] = 'studysauce_onepagecheckout_form_submit';
            $form['panes']['customer']['#title'] = 'Confirm <b>your</b> email address';
            if($account->uid == 0)
            {
                $form['panes']['customer']['pass'] = $form['panes']['customer']['new_account']['pass'];
                unset($form['panes']['customer']['new_account']);
                array_unshift($form['#validate'], 'studysauce_copy_password_info');
            }

            if(strpos($_SERVER['HTTP_REFERER'], '/parents') > -1 || strpos($_SERVER['HTTP_REFERER'], '/billmyparents') > -1 ||
                in_array('partner', $account->roles) || in_array('parent', $account->roles))
            {
                $form['panes']['customer']['#title'] = '';
                $form['panes']['customer']['primary_email']['#title'] = '<b>My</b> e-mail address';
                $form['panes']['customer']['student']['#type'] = 'textfield';
                $form['panes']['customer']['student']['#title'] = '<b>Student\'s</b> e-mail address';
                $form['panes']['customer']['student']['#required'] = true;
                hide($form['panes']['customer']['pass']);
                if(isset($account->mail) && isset($form['panes']['customer']['email_text']))
                    $form['panes']['customer']['email_text']['#markup'] = '<div><b>E-mail address:</b> ' . $account->mail . '</div>';
                $invite = studysauce_get_invite_entity();
                if(!isset($invite))
                {
                    $invite = studysauce_get_partner_entity();
                }
                if(isset($invite))
                {
                    $host = $invite->hostEntity();
                    if(isset($invite->field_first_name['und'][0]['value']))
                        $form['panes']['billing']['address']['#default_value']->billing_first_name = $invite->field_first_name['und'][0]['value'];
                    if(isset($invite->field_last_name['und'][0]['value']))
                        $form['panes']['billing']['address']['#default_value']->billing_last_name = $invite->field_last_name['und'][0]['value'];
                    if(isset($invite->field_email['und'][0]['value']))
                        $form['panes']['customer']['primary_email']['#default_value'] = $invite->field_email['und'][0]['value'];
                    if(isset($host->mail))
                        $form['panes']['customer']['student']['#default_value'] = $host->mail;
                }
                else
                {
                    $conn = studysauce_get_connections(false, true);
                    if(isset($conn[0]->mail))
                        $form['panes']['customer']['student']['#default_value'] = $conn[0]->mail;

                }

                if(!empty($form['panes']['customer']['student']['#default_value']) &&
                    (!empty($form['panes']['customer']['primary_email']['#default_value']) || !empty($form['panes']['customer']['primary_email']['#value'])))
                {
                    $form['panes']['customer']['#attributes']['style'] = 'display:none;';
                    $form['panes']['customer']['student']['#type'] = 'hidden';
                    $form['panes']['customer']['primary_email']['#type'] = 'hidden';
                }
            }
            elseif($account->uid > 0)
                $form['panes']['customer']['#attributes']['style'] = 'display:none;';

            $form['panes']['customer']['#weight'] = 1;
            unset($form['panes']['customer']['#description']);

            // add product buttons to checkout page
            $items = uc_cart_get_contents();
            $form['panes']['payment']['#description'] = '<div>';
            foreach ($items as $item)
            {
                if($item->nid == 13);
                {
                    if(end($item->data['attributes']) == 14 ||
                        (isset($item->data['attributes']['Payment Option']) && end($item->data['attributes']['Payment Option']) == 'Yearly'))
                        $form['panes']['payment']['#description'] .= '<a href="/cart/add/e-p13_q1_a4o13_s?destination=cart/checkout">$9.99/mo</a> <a href="/cart/add/e-p13_q1_a4o14_s?destination=cart/checkout" class="checked">$99/year <sup>Recommended</sup></a>';
                    else
                        $form['panes']['payment']['#description'] .= '<a href="/cart/add/e-p13_q1_a4o13_s?destination=cart/checkout" class="checked">$9.99/mo</a> <a href="/cart/add/e-p13_q1_a4o14_s?destination=cart/checkout">$99/year <sup>Recommended</sup></a>';
                    break;
                }
            }
            $form['panes']['payment']['#description'] .= '</div><img src="/' . drupal_get_path('theme', 'successinc') .'/images/money_back_compressed.png" />';

            // alter coupon
            $form['panes']['billing']['#description'] = '';
            hide($form['panes']['coupon_automatic']);
            $form['panes']['coupon']['#description'] = '';
            $form['panes']['coupon']['code']['#description'] = '';
            $form['panes']['coupon']['code']['#title'] = '';
            hide($form['panes']['coupon']['coupons']);
            hide($form['panes']['coupon']['remove']);
            $form['panes']['billing']['billing_postal_code']['#suffix'] = '<a href="#" onclick="jQuery(\'#coupon-pane\').show(500); return false;">Have a coupon code? Click <span>here</span>.</a>';
            $form['panes']['coupon']['#attributes']['style'] = 'display:none;';

            // auto fill fields from account or session
            if(isset($_SESSION['studysauce']['email']))
                $form['panes']['customer']['primary_email']['#default_value'] = $_SESSION['studysauce']['email'];

            if(isset($_SESSION['studysauce']['parent_first']))
                $form['panes']['billing']['address']['#default_value']->billing_first_name = $_SESSION['studysauce']['parent_first'];
            elseif(isset($_SESSION['studysauce']['first']))
                $form['panes']['billing']['address']['#default_value']->billing_first_name = $_SESSION['studysauce']['first'];
            elseif(isset($account->field_first_name['und'][0]['value']))
                $form['panes']['billing']['address']['#default_value']->billing_first_name = $account->field_first_name['und'][0]['value'];

            if(isset($_SESSION['studysauce']['parent_last']))
                $form['panes']['billing']['address']['#default_value']->billing_last_name = $_SESSION['studysauce']['parent_last'];
            elseif(isset($_SESSION['studysauce']['last']))
                $form['panes']['billing']['address']['#default_value']->billing_last_name = $_SESSION['studysauce']['last'];
            elseif(isset($account->field_last_name['und'][0]['value']))
                $form['panes']['billing']['address']['#default_value']->billing_last_name = $account->field_last_name['und'][0]['value'];

            $form['panes']['comments']['#description'] = 'Any other instructions for us as we build your personal study plan?';
            hide($form['actions']['cancel']);
            $form['funnel_tracker'] = array(
                '#type' => 'markup',
                '#markup' => theme('studysauce-funnel'),
                '#weight' => -100
            );
            break;
        case 'user_register_form': // user register page
            $form['account']['pass']['#type'] = 'password';
            $form['account']['pass']['#attributes'] = array('placeholder' => 'Password');
            $form['account']['pass']['#title'] = '';
            $form['account']['pass']['#description'] = '';
            $form['account']['mail']['#attributes'] = array('placeholder' => 'Email');
            $form['account']['mail']['#title'] = '';
            $form['account']['mail']['#description'] = '';

            $form['field_first_name']['und'][0]['value']['#attributes']['placeholder'] = $form['field_first_name']['und'][0]['value']['#title'];
            $form['field_first_name']['und'][0]['value']['#title'] = '';
            $form['field_first_name']['und'][0]['value']['#attributes']['autocomplete'] = 'off';

            $form['field_last_name']['und'][0]['value']['#attributes']['placeholder'] = $form['field_last_name']['und'][0]['value']['#title'];
            $form['field_last_name']['und'][0]['value']['#title'] = '';
            $form['field_last_name']['und'][0]['value']['#attributes']['autocomplete'] = 'off';

            $invite = studysauce_get_invite_entity();
            if(!isset($invite))
            {
                $invite = studysauce_get_partner_entity();
            }
            if(isset($invite))
            {
                if(isset($invite->field_first_name[LANGUAGE_NONE][0]['value']))
                    $form['field_first_name']['und'][0]['value']['#default_value'] = $invite->field_first_name[LANGUAGE_NONE][0]['value'];
                if(isset($invite->field_last_name[LANGUAGE_NONE][0]['value']))
                    $form['field_last_name']['und'][0]['value']['#default_value'] = $invite->field_last_name[LANGUAGE_NONE][0]['value'];
                $form['account']['mail']['#default_value'] = $invite->field_email[LANGUAGE_NONE][0]['value'];

                $adviserUser = $invite->hostEntity();
                if($adviserUser != null)
                {
                    $account = user_load($adviserUser->uid);
                    if(in_array('adviser', $account->roles) || in_array('master adviser', $account->roles))
                    {
                        $form['field_first_name']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
                        $form['field_last_name']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
                        $form['account']['mail']['#attributes']['readonly'] = 'readonly';
                    }
                }
            }
            else
            {
                $partner = studysauce_get_partner_entity();
                if(isset($partner))
                {
                    $form['field_first_name']['und'][0]['value']['#default_value'] = $partner->field_first_name[LANGUAGE_NONE][0]['value'];
                    $form['field_last_name']['und'][0]['value']['#default_value'] = $partner->field_last_name[LANGUAGE_NONE][0]['value'];
                    $form['account']['mail']['#default_value'] = $partner->field_email[LANGUAGE_NONE][0]['value'];
                }

            }

            break;
        case 'connector_button_form':

            if(arg(0) == 'user' && (arg(1) == null || arg(1) == 'login'))
                $form['welcome'] = array('#type' => 'markup', '#weight' => -1000, '#markup' => '<h1>Good to have you back!</h1>');
            elseif(arg(0) == 'user' && arg(1) == 'register')
                $form['welcome'] = array('#type' => 'markup', '#weight' => -1000, '#markup' => '<h1>Welcome, let\'s get started.</h1>');
            elseif(arg(0) == 'adviserprepaid')
                $form['welcome'] = array('#type' => 'markup', '#weight' => -1000, '#markup' => '<h1 style="font-size: 46px; margin-bottom:0;">Welcome to Study Sauce!</h1><h2 style="text-align: center;margin:30px 0 20px 0;font-size:22px;">Create a password to finish setting up your account.</h2>');
            elseif(arg(0) == 'userprepaid')
                $form['welcome'] = array('#type' => 'markup', '#weight' => -1000, '#markup' => '<h1 style="font-size: 46px; margin-bottom:0;">Welcome to Study Sauce!</h1><h2 style="text-align: center;margin:30px 0 20px 0;font-size:22px;">Log in to finish setting up your account.</h2>');

            $weight = 0;
            $k = null;
            foreach($form as $k => $connector)
            {
                if(!isset($connector['connector']))
                    continue;
                $form[$k]['#name'] = $form[$k]['connector']['#value']['title'];
                $form[$k]['#value'] = 'Sign in';
                $form[$k]['#weight'] = $weight;
                $weight++;
                $form[$k . '_or'] = array('#type' => 'markup', '#weight' => $weight, '#markup' => '<div id="signup-or"><span>Or</span></div>');
                $weight++;
            }
            unset($form[$k]);
            $form['sign-in-with-email']['#type'] = 'markup';
            $form['sign-in-with-email']['#markup'] = '
                <a href="#" class="sign-in-with-email" onclick="jQuery(\'#user-register-form, #user-login\').show(); jQuery(this).remove(); return false;">Or sign in with <span>email</span></a>
                <script type="text/javascript">jQuery(document).ready(function () {
                    if(jQuery(\'#user-register-form input.error, #user-login input.error\').length == 0 &&
                        jQuery(\'.sign-in-with-email\').length > 0)
                        jQuery(\'#user-register-form, #user-login\').hide();
                    else
                        jQuery(\'.sign-in-with-email\').remove();
                })</script>';
            $form['sign-in-with-email']['#weight'] = 1000;


            if(arg(0) == 'adviserprepaid')
            {

                unset($form['sign-in-with-email']);
                foreach($form as $k => $connector)
                {
                    if(!isset($connector['connector']))
                        continue;
                    unset($form[$k . '_or']);
                    unset($form[$k]);
                }
            }

            break;
        case 'user_login_block':
            break;
        case 'user_login':
            // TODO: clear invite code if user signs in to existing account?
            $form['pass']['#type'] = 'password';
            $form['pass']['#attributes'] = array('placeholder' => 'Password');
            $form['pass']['#title'] = '';
            $form['pass']['#description'] = ''; // TODO: '<a href="user/password">Forgot password?</a>';
            $form['name']['#attributes'] = array('placeholder' => 'Email');
            $form['name']['#title'] = '';
            $form['name']['#description'] = '';

            $form['actions']['submit']['#value'] = 'Sign in';
            break;
        case 'user_pass':
            $form['name']['#prefix'] = '<h1>Reset your password</h1>';
            break;
    }

}


function _studysauce_get_touched()
{
    global $user;
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'schedule')
        ->propertyCondition('title', isset($user->mail) ? $user->mail : '')
        ->propertyCondition('status', 1)
        ->range(0,1)
        ->execute();
    if (!empty($entities['node']))
    {
        $nodes = array_keys($entities['node']);
        $nid = array_shift($nodes);
        $node = node_load($nid);
        return isset($node->field_touched_music['und'][0]['value']) && $node->field_touched_music['und'][0]['value'] == 1;
    }
}


function _studysauce_time_elapsed_string($etime)
{
    if ($etime < 1)
    {
        return '0 seconds';
    }

    $a = array( 12 * 30 * 24 * 60 * 60  =>  'year',
        30 * 24 * 60 * 60       =>  'month',
        24 * 60 * 60            =>  'day',
        60 * 60                 =>  'hour',
        60                      =>  'minute',
        1                       =>  'second'
    );

    foreach ($a as $secs => $str)
    {
        $d = ($etime * 1.0) / $secs;
        if (round($d, 1) >= 1)
        {
            $r = round($d);
            return $r . ' ' . $str . ($r > 1 ? 's' : '');
        }
    }
}


function studysauce_get_sds_messages()
{
    global $user;
    $account = user_load($user->uid);
    $newSDS = array();
    $changes = array();
    // loop through messages and figure out which ones are new
    $userMessages = array();
    if(isset($account->field_messages[LANGUAGE_NONE][0]['value']))
    {
        foreach($account->field_messages[LANGUAGE_NONE] as $i => $message)
        {
            $changes['field_messages'][LANGUAGE_NONE][]['value'] = $message['value'];
            $userMessages[] = $message['value'];
        }
    }

    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'schedule')
        ->propertyCondition('title', isset($account->mail) ? $account->mail : '')
        ->propertyCondition('status', 1)
        ->range(0,1)
        ->execute();
    if (!empty($entities['node']))
    {
        $nodes = array_keys($entities['node']);
        $nid = array_shift($nodes);
        $node = node_load($nid);
        if(isset($node->field_classes[LANGUAGE_NONE][0]))
        {
            $checkins = array();
            $checkouts = array();
            $validLocations = array();
            $classes = entity_load('field_collection_item', array_map(function ($x) { return $x['value']; }, $node->field_classes[LANGUAGE_NONE]));

            list($checkins, $checkouts) = studysauce_clean_checkins($classes);

            foreach($classes as $i => $class)
            {
                if(isset($class->field_locations[LANGUAGE_NONE][0]['value']))
                {
                    foreach(explode("\n", $class->field_locations[LANGUAGE_NONE][0]['value']) as $i => $loc)
                    {
                        $locs = explode(',', trim($loc));
                        if(isset($locs[0]) && isset($locs[1]) && floatval($locs[0]) !== false && floatval($locs[1]) !== false)
                        {
                            $latLng = array(floatval($locs[0]), floatval($locs[1]));
                            if(!in_array($latLng, $validLocations))
                                $validLocations[$locs[2]] = $latLng;
                        }
                    }
                }
            } // end classes loop



            if(count($checkins) == 0)
            {
                $newSDS[] = 'multiple-locations';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'multiple-locations';
            }
            if(count($checkins) == 1)
            {
                $newSDS[] = 'switching-topics';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'switching-topics';
            }
            if(count($checkins) == 2)
            {
                $newSDS[] = 'taking-breaks';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'taking-breaks';
            }
            if(count($checkins) == 3)
            {
                $newSDS[] = 'no-cramming';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'no-cramming';
            }

            $prev = 0;
            $switch = false;
            $breaks = false;
            foreach($checkins as $time => $checkin)
            {
                if($prev > 0 && $time - $prev < 7200 && $checkins[$prev] != $checkins[$time])
                {
                    $switch = true;
                }

                $j = 0;
                $checkoutTimes = array_keys($checkouts);
                do
                {
                    if($time - $checkoutTimes[$j] > 600 && $time - $checkoutTimes[$j] < 900)
                    {
                        $breaks = true;
                    }
                    $j++;
                } while(isset($checkoutTimes[$j]) && $checkoutTimes[$j] < $time);

                $prev = $time;
            }

            if(count($checkins) == 4 && count($validLocations) > 2)
            {
                $newSDS[] = 'switching-location';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'switching-location';
            }
            elseif(count($checkins) == 4)
            {
                $newSDS[] = 'repeat-location';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'repeat-location';
            }

            if(count($checkins) == 5 && $switch)
            {
                $newSDS[] = 'multiple-topics';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'multiple-topics';
            }
            elseif(count($checkins) == 5)
            {
                $newSDS[] = 'same-topics';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'same-topics';
            }

            if(count($checkins) == 6 && $breaks)
            {
                $newSDS[] = 'right-length';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'right-length';
            }
            elseif(count($checkins) == 6)
            {
                $newSDS[] = 'too-short';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'too-short';
            }


            if(count($checkins) == 7)
            {
                $newSDS[] = 'no-highlighting';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'no-highlighting';
            }
            if(count($checkins) == 8)
            {
                $newSDS[] = 'no-music';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'no-music';
            }
            if(count($checkins) == 9)
            {
                $newSDS[] = 'no-cell';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'no-cell';
            }
            if(count($checkins) == 10)
            {
                $newSDS[] = 'no-comfort';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'no-comfort';
            }
            if(count($checkins) == 11)
            {
                $newSDS[] = 'no-multitasking';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'no-multitasking';
            }
            if(count($checkins) == 12)
            {
                $newSDS[] = 'positive-mindset';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'positive-mindset';
            }
            if(count($checkins) == 13)
            {
                $newSDS[] = 'be-prepared';
                $changes['field_messages'][LANGUAGE_NONE][]['value'] = 'be-prepared';
            }
        }
    }

    // check if message conditions have already been completed
    /*
    foreach($messages as $a => $date)
    {
        if($date && !in_array($a, $userMessages))
        {
            $changes['field_messages'][LANGUAGE_NONE][]['value'] = $a;
        }
    }
    */

    if(count($newSDS))
        user_save($account, $changes);

    return $newSDS;
}

/**
 * Implements hook_theme_registry_alter().
 * TODO: should this be put in our module instead of theme directory?
 */
function studysauce_theme_registry_alter(&$theme_registry) {
    $theme_registry['studysauce-quiz-results'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/quiz-results',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-contact'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/contact',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-partner-instructions'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/partner-instructions',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-metrics-sample'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/metrics-sample',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-strategies'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-strategies',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-account'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-account',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-import'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-import',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-uploads'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-uploads',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-header'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-header',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-plans'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-plans',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-deadlines'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-deadlines',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-metrics'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-metrics',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-goals'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-goals',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser-userlist'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser-userlist',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-strategies'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/strategies',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-adviser'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/adviser',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-about'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/about',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-premium'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/premium',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-footer'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/footer',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-funnel'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/funnel',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-account'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/account',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-header'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/header',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-email'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/studysauce-email',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-checkin'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/checkin',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-goals'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/goals',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-home'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/home',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-badges'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/awards',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-tips'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/tips',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-tips-time'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/tips-time',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-tips-env'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/tips-env',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-tips-strategy'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/tips-strategy',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-deadlines'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/deadlines',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-schedule'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/schedule',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-profile'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/profile',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-followup'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/followup-email',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-followup-parents'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/followup-email2',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-metrics'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/metrics',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-email-icon'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/studysauce-email-icon',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-plans'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/plans',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-plan-sample'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/plans-sample',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-menu'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/menu',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-invite'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/invite',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-partner'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/partner',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-partner-info'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/partner-info',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-parent-student'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/user-parent-student',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
    $theme_registry['studysauce-buy'] = array(
        'template' => drupal_get_path('theme', 'successinc') . '/buy',
        'theme path' => drupal_get_path('theme', 'successinc'),
        'type' => 'module',
        'preprocess functions' => array(),
    );
}

function _studysauce_orders_by_uid($uid, $order_status = 'completed')
{
    $uids = array($uid);
    $conn = studysauce_get_connections(false, true);
    foreach ($conn as $i => $c)
        $uids[] = $c->uid;

    $result = array();
    foreach($uids as $uid)
    {
        $query = db_select('uc_orders', 'uo');
        $query->addField('uo', 'order_id');
        $query->addField('uo', 'order_total');
        $query->addField('uo', 'order_status'); // optional: $query->addField('uo', 'product_count');
        $query->addField('uo', 'created');
        $query->addJoin('LEFT', 'uc_order_products', 'p', 'p.order_id = uo.order_id');
        $query->addField('p', 'nid');
        $query->condition('order_status', $order_status);
        $query->condition('uid', $uid);
        $query->orderBy('uo.created', 'DESC');
        $orders = $query->execute()->fetchAll();
        $orders = array_map(function ($x) { return uc_order_load($x->order_id); }, $orders);
        $result = array_merge($result, $orders);
    }
    reset($result);
    $o = array_pop($result);
    return $o;
}

function studysauce_cart_auto_empty ($form_id)
{
    // this is not a security risk because we are only selling one schedule at a time
    if(preg_match('/e-p[0-9]+_/', arg(2), $matches))
    {
        uc_cart_empty(uc_cart_get_id());
        uc_cart_links_process(substr(arg(2), 2));
    }
    else
        return drupal_get_form($form_id, arg(2));
}

/*  BLACK MAGIC, DO NOT TOUCH */
function studysauce_onepagecheckout_form_submit($form, &$form_state)
{
    form_load_include($form_state, 'inc', 'uc_cart', 'uc_cart.pages');

    // check for order submit
    if(isset($form_state['storage']['order'])) {
        $order_id = $form_state['storage']['order']->order_id;
        $reviewRequested = $_SESSION['uc_checkout'][$order_id]['do_review'];
    }

    // If the normal submit handler set do_review then call the review
    // form submit function.
    if ($reviewRequested && $form_state['redirect'] == 'cart/checkout/review') {
        // Clear the previous redirect because we're going to override it anyway.
        unset($form_state['redirect']);

        // set parent account because they entered from /parents
        if(isset($form_state['values']['panes']['customer']['student']))
            $_SESSION['invite_parent'] = $form_state['values']['panes']['customer']['student'];

        $build = uc_cart_checkout_review();

        $new_form_state = array('values' => array(), 'storage' => $form_state['storage']);
        $new_form_state['values']['form_build_id'] = $build['#form']['form_build_id']['#value'];
        $new_form_state['values']['sescrd'] = $build['#form']['sescrd']['#value'];
        $new_form_state['values']['op'] = 'Submit order';
        //$_SESSION['sescrd'] = $build['#form']['sescrd']['#value'];
        $new_form_state['uc_order'] = $new_form_state['storage']['order'];
        //uc_credit_cache('save', $new_form_state['uc_order']->data['cc_data']);
        //uc_order_save($new_form_state['uc_order']);
        //$new_form_state['uc_order']->payment_details['cc_cvv'] = $form_state['values']['panes']['payment']['details']['cc_cvv'];
        //drupal_form_submit('uc_cart_checkout_review', $new_form_state);
        uc_cart_checkout_review_form_submit($form, $new_form_state);

        $processNormal = false;
        if ($new_form_state['redirect'] == 'cart/checkout/review') {
            // if we failed because of recurring, just remove and ignore it
            $errors = drupal_get_messages('error');
            if(count($errors) == 1)
            {
                if(strpos(array_pop($errors['error']), 'could not process your recurring payment') > -1)
                {
                    $processNormal = true;
                    unset($_SESSION['uc_checkout'][$new_form_state['uc_order']->order_id]['do_review']);
                    $_SESSION['uc_checkout'][$new_form_state['uc_order']->order_id]['do_complete'] = TRUE;
                    $form_state['redirect'] = $form_state['storage']['base_path'] . '/checkout/complete';
                }
            }
            // There's an error, so pretend the user clicked back.
            if(!$processNormal)
            {
                $new_form_state['redirect'] = 'cart/checkout';
                uc_cart_checkout_review_form_back($form, $form_state);
                $form_state['redirect'] = $new_form_state['redirect'];
            }
        }
        else
            $form_state['redirect'] = $new_form_state['redirect'];

    }
}


function studysauce_uc_checkout_complete($order, $account)
{
    global $user;
    // TODO: determine if we should log in here, what if someone enters someone else's email and hijacks the account?
    if (/*$order->data['complete_sale'] == 'new_user' &&*/ !$user->uid) {
        $order->data['complete_sale'] = 'new_user_logged_in';
        $fields = array(
            'field_first_name' => array(LANGUAGE_NONE => array(0 => array('value' => $order->billing_first_name))),
            'field_last_name' => array(LANGUAGE_NONE => array(0 => array('value' => $order->billing_last_name)))
        );
        if(isset($_SESSION['invite_parent']))
        {
            $fields['roles'] = $account->roles;
            if ($role = user_role_load_by_name('parent'))
            {
                $fields['roles'][$role->rid] = 'parent';
            }
        }

        // save first and last name from order form
        user_save($account, $fields);
        $user = $account; // log in even if user already exists
    }

    if(isset($_SESSION['invite_parent']))
    {
        studysauce_prepay_send($order, $account, $_SESSION['invite_parent']);
    }
}


